# Python stubs generated by omniidl from /home/k-okada/catkin_ws/ws_old_hrpsys/build_isolated/hrpsys/build/hrpsys-base-source/idl/ImpedanceControllerService.idl

print ";;"
print ";; Loading ImpedanceController < 315.1.9"
print ";;"

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "OpenHRP"
#
__name__ = "OpenHRP"
_0_OpenHRP = omniORB.openModule("OpenHRP", r"/home/k-okada/catkin_ws/ws_old_hrpsys/build_isolated/hrpsys/build/hrpsys-base-source/idl/ImpedanceControllerService.idl")
_0_OpenHRP__POA = omniORB.openModule("OpenHRP__POA", r"/home/k-okada/catkin_ws/ws_old_hrpsys/build_isolated/hrpsys/build/hrpsys-base-source/idl/ImpedanceControllerService.idl")


# interface ImpedanceControllerService
_0_OpenHRP._d_ImpedanceControllerService = (omniORB.tcInternal.tv_objref, "IDL:OpenHRP/ImpedanceControllerService:1.0", "ImpedanceControllerService")
omniORB.typeMapping["IDL:OpenHRP/ImpedanceControllerService:1.0"] = _0_OpenHRP._d_ImpedanceControllerService
_0_OpenHRP.ImpedanceControllerService = omniORB.newEmptyClass()
class ImpedanceControllerService :
    _NP_RepositoryId = _0_OpenHRP._d_ImpedanceControllerService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... DblSequence3
    class DblSequence3:
        _NP_RepositoryId = "IDL:OpenHRP/ImpedanceControllerService/DblSequence3:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DblSequence3  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 3)
    _ad_DblSequence3 = (omniORB.tcInternal.tv_alias, DblSequence3._NP_RepositoryId, "DblSequence3", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 3))
    _tc_DblSequence3 = omniORB.tcInternal.createTypeCode(_ad_DblSequence3)
    omniORB.registerType(DblSequence3._NP_RepositoryId, _ad_DblSequence3, _tc_DblSequence3)
    
    # struct impedanceParam
    _0_OpenHRP.ImpedanceControllerService.impedanceParam = omniORB.newEmptyClass()
    class impedanceParam (omniORB.StructBase):
        _NP_RepositoryId = "IDL:OpenHRP/ImpedanceControllerService/impedanceParam:1.0"

        _NP_ClassName = "OpenHRP.ImpedanceControllerService.impedanceParam"

        def __init__(self, name, base_name, target_name, M_p, D_p, K_p, M_r, D_r, K_r, ref_force, force_gain, ref_moment, moment_gain, sr_gain, avoid_gain, reference_gain, manipulability_limit):
            self.name = name
            self.base_name = base_name
            self.target_name = target_name
            self.M_p = M_p
            self.D_p = D_p
            self.K_p = K_p
            self.M_r = M_r
            self.D_r = D_r
            self.K_r = K_r
            self.ref_force = ref_force
            self.force_gain = force_gain
            self.ref_moment = ref_moment
            self.moment_gain = moment_gain
            self.sr_gain = sr_gain
            self.avoid_gain = avoid_gain
            self.reference_gain = reference_gain
            self.manipulability_limit = manipulability_limit
    
    _d_impedanceParam  = _0_OpenHRP.ImpedanceControllerService._d_impedanceParam = (omniORB.tcInternal.tv_struct, impedanceParam, impedanceParam._NP_RepositoryId, "impedanceParam", "name", (omniORB.tcInternal.tv_string,0), "base_name", (omniORB.tcInternal.tv_string,0), "target_name", (omniORB.tcInternal.tv_string,0), "M_p", omniORB.tcInternal.tv_double, "D_p", omniORB.tcInternal.tv_double, "K_p", omniORB.tcInternal.tv_double, "M_r", omniORB.tcInternal.tv_double, "D_r", omniORB.tcInternal.tv_double, "K_r", omniORB.tcInternal.tv_double, "ref_force", omniORB.typeMapping["IDL:OpenHRP/ImpedanceControllerService/DblSequence3:1.0"], "force_gain", omniORB.typeMapping["IDL:OpenHRP/ImpedanceControllerService/DblSequence3:1.0"], "ref_moment", omniORB.typeMapping["IDL:OpenHRP/ImpedanceControllerService/DblSequence3:1.0"], "moment_gain", omniORB.typeMapping["IDL:OpenHRP/ImpedanceControllerService/DblSequence3:1.0"], "sr_gain", omniORB.tcInternal.tv_double, "avoid_gain", omniORB.tcInternal.tv_double, "reference_gain", omniORB.tcInternal.tv_double, "manipulability_limit", omniORB.tcInternal.tv_double)
    _tc_impedanceParam = omniORB.tcInternal.createTypeCode(_d_impedanceParam)
    omniORB.registerType(impedanceParam._NP_RepositoryId, _d_impedanceParam, _tc_impedanceParam)


_0_OpenHRP.ImpedanceControllerService = ImpedanceControllerService
_0_OpenHRP._tc_ImpedanceControllerService = omniORB.tcInternal.createTypeCode(_0_OpenHRP._d_ImpedanceControllerService)
omniORB.registerType(ImpedanceControllerService._NP_RepositoryId, _0_OpenHRP._d_ImpedanceControllerService, _0_OpenHRP._tc_ImpedanceControllerService)

# ImpedanceControllerService operations and attributes
ImpedanceControllerService._d_setImpedanceControllerParam = ((omniORB.typeMapping["IDL:OpenHRP/ImpedanceControllerService/impedanceParam:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
ImpedanceControllerService._d_getImpedanceControllerParam = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:OpenHRP/ImpedanceControllerService/impedanceParam:1.0"]), None)
ImpedanceControllerService._d_deleteImpedanceController = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
ImpedanceControllerService._d_waitDeletingImpedanceController = (((omniORB.tcInternal.tv_string,0), ), (), None)
ImpedanceControllerService._d_deleteImpedanceControllerAndWait = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)

# ImpedanceControllerService object reference
class _objref_ImpedanceControllerService (CORBA.Object):
    _NP_RepositoryId = ImpedanceControllerService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def setImpedanceControllerParam(self, *args):
        return _omnipy.invoke(self, "setImpedanceControllerParam", _0_OpenHRP.ImpedanceControllerService._d_setImpedanceControllerParam, args)

    def getImpedanceControllerParam(self, *args):
        return _omnipy.invoke(self, "getImpedanceControllerParam", _0_OpenHRP.ImpedanceControllerService._d_getImpedanceControllerParam, args)

    def deleteImpedanceController(self, *args):
        return _omnipy.invoke(self, "deleteImpedanceController", _0_OpenHRP.ImpedanceControllerService._d_deleteImpedanceController, args)

    def waitDeletingImpedanceController(self, *args):
        return _omnipy.invoke(self, "waitDeletingImpedanceController", _0_OpenHRP.ImpedanceControllerService._d_waitDeletingImpedanceController, args)

    def deleteImpedanceControllerAndWait(self, *args):
        return _omnipy.invoke(self, "deleteImpedanceControllerAndWait", _0_OpenHRP.ImpedanceControllerService._d_deleteImpedanceControllerAndWait, args)

    __methods__ = ["setImpedanceControllerParam", "getImpedanceControllerParam", "deleteImpedanceController", "waitDeletingImpedanceController", "deleteImpedanceControllerAndWait"] + CORBA.Object.__methods__

omniORB.registerObjref(ImpedanceControllerService._NP_RepositoryId, _objref_ImpedanceControllerService)
_0_OpenHRP._objref_ImpedanceControllerService = _objref_ImpedanceControllerService
del ImpedanceControllerService, _objref_ImpedanceControllerService

# ImpedanceControllerService skeleton
__name__ = "OpenHRP__POA"
class ImpedanceControllerService (PortableServer.Servant):
    _NP_RepositoryId = _0_OpenHRP.ImpedanceControllerService._NP_RepositoryId


    _omni_op_d = {"setImpedanceControllerParam": _0_OpenHRP.ImpedanceControllerService._d_setImpedanceControllerParam, "getImpedanceControllerParam": _0_OpenHRP.ImpedanceControllerService._d_getImpedanceControllerParam, "deleteImpedanceController": _0_OpenHRP.ImpedanceControllerService._d_deleteImpedanceController, "waitDeletingImpedanceController": _0_OpenHRP.ImpedanceControllerService._d_waitDeletingImpedanceController, "deleteImpedanceControllerAndWait": _0_OpenHRP.ImpedanceControllerService._d_deleteImpedanceControllerAndWait}

ImpedanceControllerService._omni_skeleton = ImpedanceControllerService
_0_OpenHRP__POA.ImpedanceControllerService = ImpedanceControllerService
omniORB.registerSkeleton(ImpedanceControllerService._NP_RepositoryId, ImpedanceControllerService)
del ImpedanceControllerService
__name__ = "OpenHRP"

#
# End of module "OpenHRP"
#
__name__ = "ImpedanceControllerService_idl"

_exported_modules = ( "OpenHRP", )

# The end.
