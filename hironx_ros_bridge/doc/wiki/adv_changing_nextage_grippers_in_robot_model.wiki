## page was renamed from rtmros_nextage/Tutorials/To write a gripper module for Nextage Open
## For instruction on writing tutorials
## http://www.ros.org/wiki/WritingTutorials
####################################
##FILL ME IN
####################################
## for a custom note with links:
## note =
## for the canned note of "This tutorial assumes that you have completed the previous tutorials:" just add the links
## note.0= [[rtmros_nextage/Tutorials/Changing Grippers on Nextage Hardware]]
## descriptive title for the tutorial
## title = Changing Nextage Grippers in Robot Model
## multi-line description to be displayed in search
## description =
## the next tutorial description (optional)
## next =
## links to next tutorial (optional)
## next.0.link= [[rtmros_nextage/Tutorials/Changing Grippers on Nextage Hardware|Changing Grippers on Nextage Hardware]]
## next.1.link=
## what level user is this tutorial for
## level= AdvancedCategory
## keywords = Kawada, Nextage Open, dual-arm
####################################
<<IncludeCSTemplate(TutorialCSHeaderTemplate)>> <<TableOfContents(4)>>

== Introduction ==
This wiki tutorial describes how to create a software module (models, program) of your custom device with `Nextage Open`, taking a custom hand as an example. The robot's Digital In and Output (`DIO`) assignment is available through the Robot Hardware Manual.

== Prerequisite ==
=== Download Source Code ===
In this tutorial, we will add your custom hand module into [[nextage_description]], the original package of NEXTAGE OPEN that stores model information. Even if the package is already installed on your machine via binary installation (eg. by using `apt-get` on Ubuntu), modifying to its protected directory is not a good idea at all and thus you're encouraged to download the source.

{{{
$ cd %YOUR_CATKIN_WORKSPACE%
$ git clone https://github.com/tork-a/rtmros_nextage.git
}}}
 . If you are not familiar with `catkin workspace`, create one by referring to [[http://wiki.ros.org/catkin/Tutorials/create_a_workspace|tutorial for creating catkin workspace]].

We will assume we use [[nextage_description]] and [[nextage_ros_bridge]] packages from the downloaded source.

=== Prepare Hand Model ===
Let's assume that we have a CAD file we'd like to add as a new hand called `SuctionHand.wrl`, a `VRML` file that includes a robot model whose coordinate frame is equivalent to original `ChunkHand.wrl`.

{{http://wiki.ros.org/rtmros_nextage?action=AttachFile&do=get&target=Screenshot_from_2013-11-06+10_51_06.png|Sample of NEXTAGE OPEN on Visualizer RViz"|height="260"}} 

In the factory setting of `NEXTAGE OPEN`, the initial pose of the arms is like the image above where the upper arm links straight down, links from elbows to hands stretching toward the front of the robot. The absolute coordinate of the robot: x axis points forward from the robot chest, the y axis is to the robot's left, and the z axis is in the vertical up direction. The origin of the hand model is located on the interface flange surface.

{{attachment:nextage_gripper_model.png|World coordinates of hand model|height="640"}} 

Put the `.wrl` file under `nextage_description/models`

== Convert To Semantic Model for RTM-ROS world ==
In the following sections, model files in 3 different formats are involved here. Hope this diagram helps to understand the relationship between each.

{{https://docs.google.com/drawings/d/1r1YDeLS4iXwk6Vl2qOg9tAIqt7UeoPHeRwya7fHBY4c/pub?w=809&h=546|Diagram of different model files|height="375"}} ([[https://docs.google.com/drawings/d/1r1YDeLS4iXwk6Vl2qOg9tAIqt7UeoPHeRwya7fHBY4c/pub?w=809&h=546|Original diagram file]])

First, once again check prerequiste, in particular [[rtmros_nextage/Tutorials/Changing%20Nextage%20Grippers%20in%20Robot%20Model#Download_Source_Code|downloading source code]] on to your machine.

=== Add your model to OpenHRP3 wrl model file ===
(TODO: elaborate why we need to do this, what's OpenHRP3 wrl model, etc.)

Change [[https://github.com/tork-a/rtmros_nextage/blob/groovy-devel/nextage_description/models/main.wrl|nextage_description/models/main.wrl]] as follows:

{{{
 # 'Inline {url "ChunkHand.wrl"}'
 'Inline {url "SuctionHand.wrl"}"
}}}
The portion that contains the same line of code now looks like this:

{{{
 Transform {
  translation  -0.065 0 0 children [
   # Inline { url "ChuckHand.wrl" }
   Inline { url "SuctionHand.wrl" }
  ]
 }
}}}

=== Create COLLADA model ===
(TODO: elaborate why we need to do this, what's dae model, etc.)

Run following commands to convert `wrl` model into `COLLADA` format:

{{{
 $ roscd nextage_description/models
 $ rosrun openhrp3 export-collada -i main.wrl -o main.dae
 $ cp main.dae ../../nextage_ros_bridge/nextage.dae
}}}
=== Create URDF model ===
(TODO: elaborate why we need to do this, where to get collada_tools, etc.)

Run following commands to convert COLLADA model into URDF model:

{{{
 $ cd ../urdf
 $ rosrun collada_tools collada_to_urdf ../models/main.dae --mesh_output_dir=meshes --mesh_prefix=package://nextage_description/urdf/meshes
 $ sed s/HiroNX/NextageOpen/ HiroNX.urdf  > NextageOpen.urdf  # --(*) )--
}}}
(*) if you want to avoid this, you have to change DEF HiroNX Humanoid to DEF NextageOpen Humanoid in main.wrl, this may have several side-effects, for example we have to change  `args.robot = "RobotHardware0"` if `args.host` else "HiroNX(Robot)0" to NextageOpen(Robot)0 in nextage.py

==== Tips ====
Better to check urdf file with :

{{{
$ roslaunch urdf_tutorial display.launch model:=urdf/Nextage.urdf gui:=True
}}}
(This does not work with `collada` file since `joint_state_publisher` is not capable of reading it)

=== .conf and .xml files in conf directory ===
Once done in generating model files, you need to tell the underlining libraries (`OpenRTM`, `OpenHRP3`) about the locations of model files. In order to do so, you just need to build your package so that the configuration files will be generated using the templates that are placed in `conf` folder in [[https://github.com/tork-a/rtmros_nextage/tree/groovy-devel/nextage_ros_bridge|nextage_ros_bridge]]. At this time of writing, you might see the following template files:
{{{
RobotHardware.conf.in
conf.in
nosim.RobotHardware.conf.in
nosim.conf.in
nosim.xml.in
xml.in
}}}

Now you build:
{{{
$ cd %YOUR_CATKIN_WORKSPACE%
$ catkin_make
}}}

This turns those files with `.in` suffix into files with concrete path values in them and `.in` will be removed from the file names.

    {{{#!wiki blue/solid
    If you're curious about more detail of these config files, `.conf` files are for `OpenRTM` ([[http://www.openrtm.org/openrtm/ja/content/%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB-%E5%9F%BA%E7%A4%8E%E7%B7%A8|description]], [[https://github.com/start-jsk/hrpsys/blob/master/test/test-pa10.test|example]]). xml files are [[http://www.openrtp.jp/openhrp3/3.0.2/jp/grxui_tutorial.html|used by OpenHRP3]]. Also, if there's any question, [[https://github.com/start-jsk/rtmros_hironx/issues/46|this ticket]] might a good place to ask further.
    }}}


== Create MoveIt! package containing hands ==
(TBD) : We do not think anything is needed for using MoveIt with new hands model

== Create Software In Python ==
You're almost ready to get your hands moving. Now, coding time.

Hand's software implementation of Nextage employs [[http://en.wikipedia.org/wiki/Command_pattern|Command Pattern]]. With this design, task to add a custom hand software module can be minimized; create `Command` class where the hands' specific functionalities are defined, and bind it to another class that represents hands, and finally use it from "main" robot client module (eg. [[https://github.com/tork-a/rtmros_nextage/blob/groovy-devel/nextage_ros_bridge/src/nextage_ros_bridge/nextage_client.py|nextage_client.py]]).

{{https://docs.google.com/drawings/d/1sloogpB9dv4VbcouHKH6hZynTmZ9-tvdxSzDJ27KRcE/pub?w=1440&h=1080|Nextage hand class hierchy|width="525"}} ([[https://docs.google.com/drawings/d/1sloogpB9dv4VbcouHKH6hZynTmZ9-tvdxSzDJ27KRcE/edit|Editable original diagram file]])

=== Add Hand's Function By Creating "Command" Class ===
First, create a python file that extends [[https://github.com/tork-a/rtmros_nextage/blob/groovy-devel/nextage_ros_bridge/src/nextage_ros_bridge/command/abs_hand_command.py|nextage_ros_bridge/abs_hand_command.py]] that contains basic stuff for all hand modules, put it in the source folder of [[nextage_ros_bridge]].

{{{
$ roscd nextage_ros_bridge/src/nextage_ros_bridge/command
$ touch %YOUR_COMMAND%.py
}}}
Then from here, we'll look at a code snippet of a concrete example of [[https://github.com/tork-a/rtmros_nextage/blob/ba7fd582add4b3563f2f5fb8af7720b358d52ce9/nextage_ros_bridge/src/nextage_ros_bridge/command/airhand_command.py|suction hand python module]] (cited Feb 2, 2014):

{{{
#!python block=airhand_command_py
#!/usr/bin/env python

import time
import threading

import rospy

from abs_hand_command import AbsractHandCommand


class AirhandCommand(AbsractHandCommand):
    '''dio_writer
    Following Command design pattern, this class represents command for
    an Airhand of NEXTAGE OPEN.

    As of 2/1/2014, it's only implemented for a right arm (since there's no
    testing environment for left arm).
    '''
    # TODO: Unittest is needed!!

    # For air hands
    AIRHAND_DRAWIN = 'drawin'
    AIRHAND_KEEP = 'keep'
    AIRHAND_RELEASE = 'release'

    ## Might not be necessary. Maybe use only where you have to specify
    ## dangerous situation.AIRHAND_KEEP
    AIRHAND_DANGER = 'danger'

    def __init__(self, hands, hand):
        '''
        @see nextage_ros_bridge.command.abs_hand_command.AbsractHandCommand
        @type hands: nextage_ros_bridge.base_hands.BaseHands
        @type hand: str
        @param hand: Side of hand. Variables that are defined in
        nextage_ros_bridge.base_hands.BaseHands can be used { HAND_L, HAND_R }.
        '''
        super(AirhandCommand, self).__init__(hands, hand)
        self._SLEEP_POST_RELEASE = 3.0

    def execute(self, operation):
        '''
        @see abs_hand_command.AbsractHandCommand.execute
        '''
        dout = []
        mask = [self._DIO_SUCTION_R_1, self._DIO_SUCTION_R_2]

        # TODO: Implement for R hand too.
        if self.AIRHAND_DRAWIN == operation:
            if self._hands.HAND_L == self._hand:
                dout = [self._DIO_SUCTION_L_1]
            elif self._hands.HAND_R == self._hand:
                dout = [self._DIO_SUCTION_R_1]
        elif self.AIRHAND_KEEP == operation:
            if self._hands.HAND_L == self._hand:
                pass  # Do nothing since off for both pins.
            elif self._hands.HAND_R == self._hand:
                pass  # Do nothing since off for both pins.
        elif self.AIRHAND_RELEASE == operation:
            if self._hands.HAND_L == self._hand:
                dout = [self._DIO_SUCTION_L_2]
            elif self._hands.HAND_R == self._hand:
                dout = [self._DIO_SUCTION_R_2]

            # Create a thread to do KEEP action after the specified amount
            # of time without stopping the program.
            thread = AirhandReleaseThread(self, self._SLEEP_POST_RELEASE)
            thread.start()
        else:
            # TODO: Might want to thrown exception?
            rospy.logwarn('No gripper specified. Do nothing.')
            return
        self._hands._dio_writer(dout, mask)

    def _assign_dio_names(self):
        '''
        @see abs_hand_command.AbsractHandCommand._assign_dio_names
        '''
        #DIO reassignment for the class-specific purpose
        self._DIO_SUCTION_R_1 = self._DIO_22
        self._DIO_SUCTION_R_2 = self._DIO_23
        self._DIO_SUCTION_L_1 = self._DIO_27
        self._DIO_SUCTION_L_2 = self._DIO_28
}}}
Now let's look at what this `airhand_command.py` does step-by-step:

    <<CodeRef(airhand_command_py,11,11)>>
    Extending `AbsractHandCommand` as already mentioned.
    
    <<CodeRef(airhand_command_py,22,24)>> Possible commands are defined as member variables. With the design of this particular class, this command represents multiple functionalities that this hand provides (which, may be a little confusing with respect to the concept of `Command` Pattern). Related to that, it's more useful to keep these accessible to the external classes (ie. no leading underscore with their names).
    
    <<CodeRef(airhand_command_py,30,38)>> Initializing with just passing arguments to the constructor of its super class.
    
    <<CodeRef(airhand_command_py,75,83)>> We skip and reach down the bottom of the code first where we re-assign the name of `DIO`s to adjust to the specific purpose the `DIO`s are used for this class. To do so by overriding method `_assign_dio_names` isn't mandatory (though recommended to avoid confusion of other developers or even you in the future).
    
    In this particular class, these four `DIO`s are used for the stated purposes, which are defined in the hand's electrical design (TODO: reference to electrical design tutorial how to assign DIO if any)).
    
    Now going back up the code,
    
    <<CodeRef(airhand_command_py,41,41)>> This part is the "body" of the functions your custom hand provides.
    
    <<CodeRef(airhand_command_py,45,46)>> Here you prepare two lists: `dout` and `mask`. While writing this hand's code, you're freed from bit manipulation although the interface of the robot's `DIO` is designed to interact by bit arrays. You just have to specify which the specific bits to use.
    
    So the two lists are:
    
     * `dout`: bit values that indicate on/off of the DIO pins.
     * `mask`: Represents the enabled pin(s).
    
    <<CodeRef(airhand_command_py,49,51)>> Now the operations are coded. Here we're only looking at the first conditional block; the rest is just in similar structure.
    
    Simply we assign the bit for the identified side of the hands for the designated operation (`draw in` in this case).

    <<CodeRef(airhand_command_py,73,73)>> This line is `required`; we send out the bit arrays to the DIO interface.

=== Bind Hand-command to Hand Class ===
We've added a hand, a model and its function. So now we're good to use it.

First, instantiate the command class you just created in a Hand class. You can look at [[https://github.com/tork-a/rtmros_nextage/blob/b19a6e2246fb818e69e9239485dcb42db6e92025/nextage_ros_bridge/src/nextage_ros_bridge/iros13_hands.py#L69|a sample here]], some of which is cited like:

{{{
class Iros13Hands(BaseToolchangerHands):
:
    def __init__(self, parent):
        '''
        @see: AbsractIros13Hands.__init__
        '''
        self.airhand_l_command = AirhandCommand(self, self.HAND_L)
        self.airhand_r_command = AirhandCommand(self, self.HAND_R)
}}}
Add the side as an argument. That's it for the `Hand` class.

Very finally, you are all ready to use the hand!

=== Use Hand-command From Robot Client ===
From robot's client class, like NextageClient, you can call `execute` function of each `Command` class ([[https://github.com/tork-a/rtmros_nextage/blob/b19a6e2246fb818e69e9239485dcb42db6e92025/nextage_ros_bridge/src/nextage_ros_bridge/nextage_client.py#L95|just like these methods in NextageClient class]]).

That's it! As I predicted, hand-command is pretty much all the code you need to write in order to add your custom hand module.

## AUTOGENERATED DO NOT DELETE
## TutorialCategory
## FILL IN THE STACK TUTORIAL CATEGORY HERE
