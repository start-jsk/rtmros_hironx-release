## For instruction on writing tutorials
## http://www.ros.org/wiki/WritingTutorials
####################################
##FILL ME IN
####################################
## for a custom note with links:
## note =
## for the canned note of "This tutorial assumes that you have completed the previous tutorials:" just add the links
## note.0=
## descriptive title for the tutorial
## title = Introduction to Programming Hiro / NEXTAGE OPEN
## multi-line description to be displayed in search
## description = Introduction to Various API options to start programming for Hiro (Open) / NEXTAGE OPEN robot.
## the next tutorial description (optional)
## next =
## links to next tutorial (optional)
## next.0.link= [[rtmros_nextage/Tutorials/Programming_Hiro_NEXTAGE_OPEN_RTM|Programming Hiro/NEXTAGE OPEN in OpenRTM]]
## next.1.link=
## what level user is this tutorial for
## level= BeginnerCategory
## keywords = Hiro, NEXTAGE, NXO, dual-arm, industrial robot
####################################
<<IncludeCSTemplate(TutorialCSHeaderTemplate)>> <<TableOfContents(5)>>

== More than five APIs are available via ROS, RTM ==
##begin_api_hironx_nxo
[[https://docs.google.com/drawings/d/1H1GLYfBmZ7JRnBhKubCrptav34fCfZzn3W9PEO_5pgI/pub?w=960&h=720|{{https://docs.google.com/drawings/d/1H1GLYfBmZ7JRnBhKubCrptav34fCfZzn3W9PEO_5pgI/pub?w=960&h=720}}]]

 . Fig. (click to magnify) API diagram for `Hiro/NEXTAGE OPEN`. You can see that there are multiple interfaces, more from ROS than from `HIRONX`. For both `Hiro` (open) and `NEXTAGE OPEN`, [[http://docs.ros.org/hydro/api/hironx_ros_bridge/html/classhironx__ros__bridge_1_1hironx__client_1_1HIRONX.html|HIRONX]] works as its main RTM-based python API, and it is the most featured interface for this robot among others, but ROS interface is also actively being developed (as of Sep 2014).

##end_api_hironx_nxo

There's a tutorial for each interface in the diagram as follows. Numbers correspond:

 1. [[rtmros_nextage/Tutorials/Programming_Hiro_NEXTAGE_OPEN_RTM|Programming via NXO RTM Interface]] (using [[hrpsys]] API in `python`)

 2. [[rtmros_nextage/Tutorials/Programming_Hiro_NEXTAGE_OPEN_ROS|Programming via NXO ROS python Interface]] using  [[joint_trajectory_action]] interface

 3. [[rtmros_nextage/Tutorials/Programming_Hiro_NEXTAGE_OPEN_MOVEIT|Programming via MoveIt Python Interface]]
   * [[http://moveit.ros.org/|MoveIt!]] in `python`

 4. Programming via MoveIt C++ Interface (TBA)
   * [[http://moveit.ros.org/|MoveIt!]] in `C++`

 5. Programming via low-level ROS I/F ([[actionlib]], [[joint_trajectory_action|JointTrajectoryAction]]) (TBA)

 6. Programming via NXO ROS C++ Interface (TBA)

Also general tutorial:

 * [[rtmros_nextage/Tutorials/Programming_Hiro_NEXTAGE_OPEN_GUI|Interact with MoveIt UI]]

== Which API to use ==

 * '''Advantage of RTM interface (HIRONX)''': [[rtmros_nextage/Tutorials/Install%20NEXTAGE%20OPEN%20software%20on%20your%20machine#Overall_software_components|As we saw]], `HiroNXO` robot runs on top of `OpenRTM` and it was relatively recent (back in 2011) when [[http://www.jsk.t.u-tokyo.ac.jp/research/system/rtm-ros.html|the researchers at University of Tokyo created rtm_ros_bridge]] ([[hrpsys_ros_bridge]] that interrelates the underlining RTM processes and upper level programs written in ROS. With that historical background, no wonder RTM-based interface is more equipped as we've seen some of them [[rtmros_nextage/Tutorials/Programming_Hiro_NEXTAGE_OPEN_RTM|in the previous tutorial]]. 
 * Therefore, for some basic operations (calibration, servo on/off etc.) that are '''only provided in [[http://docs.ros.org/hydro/api/hironx_ros_bridge/html/classhironx__ros__bridge_1_1hironx__client_1_1HIRONX.html|RTM python client (called HIRONX)]] class in `python`''' (as of Sep 2014), you must use `RTM` I/F.
   * Porting every feature to [[http://docs.ros.org/hydro/api/hironx_ros_bridge/html/classhironx__ros__bridge_1_1ros__client_1_1ROS__Client.html|ROS client (py)]] nor to [[http://docs.ros.org/hydro/api/hironx_ros_bridge/html/classROS__Client.html|ROS client (cpp)]] is NOT planned.
 * '''You can mix all the APIs in your single file'''; for example, in your `example_app.py`, it's totally fine to import RTM (1 in the diagram above), ROS client (2) and [[http://moveit.ros.org/doxygen/classmoveit__commander_1_1move__group_1_1MoveGroupCommander.html|move_group_commander]] (3) altogether.
   * Yes, as long as written in the same language (Py or C++).

## AUTOGENERATED DO NOT DELETE
## TutorialCategory
## FILL IN THE STACK TUTORIAL CATEGORY HERE
